# --- 1. IMPORTS ---
import os
import re
import io
import csv
import json
import time
import pytz
import secrets
import threading
import requests 
from datetime import datetime, timedelta
from threading import Lock

from fastapi import (
    FastAPI, Request, Form, Cookie, HTTPException, Response, Query, Body, UploadFile, File
)
from fastapi.responses import (
    HTMLResponse, RedirectResponse, StreamingResponse, FileResponse, JSONResponse
)
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles

from dotenv import load_dotenv
from passlib.hash import bcrypt
from bson import ObjectId
from apscheduler.schedulers.background import BackgroundScheduler
from fastapi_mail import FastMail, MessageSchema, ConnectionConfig

import cloudinary
import cloudinary.uploader
import google.generativeai as genai

from app.database import meals_col, logs_col, users_col, activities_col

# --- 2. CONFIG & GLOBALS ---

# Ch·∫°y .env ƒë·ªÉ l·∫•y bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

app = FastAPI()
templates = Jinja2Templates(directory="app/templates")
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# Kh·ªüi t·∫°o Cloudinary
cloudinary.config(
    cloud_name="df4esejf8",
    api_key="673739585779132",
    api_secret="_s-PaBNgEJuBLdtRrRE62gQm4n0"
)

# C·∫•u h√¨nh email
conf = ConnectionConfig(
    MAIL_USERNAME="smartcalories.vn@gmail.com",
    MAIL_PASSWORD="zpln zcew qcti koba",
    MAIL_FROM="smartcalories.vn@gmail.com",
    MAIL_PORT=587,
    MAIL_SERVER="smtp.gmail.com",
    MAIL_STARTTLS=True,      
    MAIL_SSL_TLS=False,     
    USE_CREDENTIALS=True
)

# Kh·ªüi t·∫°o cache v√† lock
chatbot_temp_cache = {}
last_register_time = {}
register_lock = Lock()
reset_tokens = {}

# B·∫£ng chuy·ªÉn ƒë·ªïi ho·∫°t ƒë·ªông th·ªÉ ch·∫•t sang MET
activity_met_table = {
    "walking": 3.5,
    "running": 7.5,
    "cycling": 6.8,
    "swimming": 8.0,
    "yoga": 2.5,
    "weightlifting": 3.0,
    "jumping_rope": 10.0,
}

# H√†m t√≠nh to√°n l∆∞·ª£ng calo ƒë·ªët ch√°y d·ª±a tr√™n MET
def fix_objectid(obj):
    if isinstance(obj, list):
        return [fix_objectid(item) for item in obj]
    if isinstance(obj, dict):
        return {k: (str(v) if isinstance(v, ObjectId) else fix_objectid(v)) for k, v in obj.items()}
    return obj

# H√†m h·ªó tr·ª£ l·∫•y user hi·ªán t·∫°i
def get_current_user_id(user_id: str = Cookie(None)) -> ObjectId:
    if not user_id:
        raise HTTPException(status_code=401, detail="Ch∆∞a ƒëƒÉng nh·∫≠p")
    return ObjectId(user_id)

# Ki·ªÉm tra thao t√°c qu√° nhanh
def is_too_fast(user, action, seconds=3):
    now = time.time()
    last_time = user.get(f"last_{action}_time", 0)
    if now - last_time < seconds:
        return True
    users_col.update_one({"_id": user["_id"]}, {"$set": {f"last_{action}_time": now}})
    return False

# H√†m t√≠nh BMR/TDEE
def calculate_bmr(weight, height, age, gender):
    if gender == "male":
        return 88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)
    else:
        return 447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)

def calculate_tdee(bmr, activity_level=1.55):
    return float(bmr * activity_level)

# Formatter th·ªùi gian Vi·ªát Nam
def format_vn_datetime(dt_str):
    # dt_str d·∫°ng "YYYY-MM-DD HH:MM:SS"
    try:
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
        return dt.strftime("%H:%M %d/%m/%Y")
    except Exception:
        return dt_str
    
# H√†m ghi log ƒëƒÉng nh·∫≠p b·∫•t ƒë·ªìng b·ªô
def log_login_async(db, user_fullname, ip, time_str):
    def task():
        doc = {
            "time": time_str,
            "user": user_fullname,
            "ip": ip
        }
        db["login_logs"].insert_one(doc)  
    threading.Thread(target=task, daemon=True).start()

# --- 3. ROUTES ---

# Route ƒëƒÉng k√Ω
@app.get("/register")
def register_form(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})


@app.post("/register")
def register_user(
    request: Request,
    fullname: str = Form(...),
    username: str = Form(...),
    email: str = Form(...),
    password: str = Form(...),
    confirm_password: str = Form(...)
):
    client_ip = request.client.host if request.client else "unknown"
    now = time.time()
    with register_lock:
        last_time = last_register_time.get(client_ip, 0)
        if now - last_time < 3:
            return templates.TemplateResponse("register.html", {
                "request": request,
                "error": "Vui l√≤ng ch·ªù v√†i gi√¢y r·ªìi th·ª≠ l·∫°i.",
                "fullname": fullname,
                "username": username,
                "email": email
            }, status_code=429)
        last_register_time[client_ip] = now

    if password != confirm_password:
        return templates.TemplateResponse("register.html", {
            "request": request,
            "error": "M·∫≠t kh·∫©u kh√¥ng kh·ªõp",
            "fullname": fullname,
            "username": username,
            "email": email
        }, status_code=400)

    if users_col.find_one({"username": username}):
        return templates.TemplateResponse("register.html", {
            "request": request,
            "error": "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i",
            "fullname": fullname,
            "username": username,
            "email": email
        }, status_code=400)

    if users_col.find_one({"email": email}):
        return templates.TemplateResponse("register.html", {
            "request": request,
            "error": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
            "fullname": fullname,
            "username": username,
            "email": email
        }, status_code=400)

    user_count = users_col.count_documents({})
    role = "admin" if user_count < 3 else "user"
    hashed = bcrypt.hash(password)
    users_col.insert_one({
        "fullname": fullname,
        "username": username,
        "email": email,  # L∆∞u email
        "hashed_password": hashed,
        "role": role
    })

    return RedirectResponse("/login", status_code=302)

# Route ƒëƒÉng nh·∫≠p
@app.get("/login")
def login_form(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})


@app.post("/login")
def login_user(
    request: Request,
    username: str = Form(...),
    password: str = Form(...)
):
    user = users_col.find_one({"username": username})
    if not user or not bcrypt.verify(password, user["hashed_password"]):
        return templates.TemplateResponse(
            "login.html",
            {
                "request": request,
                "error": "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
            },
            status_code=401
        )
    if user.get("is_banned", False):
        return templates.TemplateResponse(
            "login.html",
            {
                "request": request,
                "error": "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
            },
            status_code=403
        )

    session_token = secrets.token_urlsafe(16)
    users_col.update_one({"_id": user["_id"]}, {"$set": {"session_token": session_token}})
    response = RedirectResponse("/", status_code=302)
    response.set_cookie(
        key="user_id",
        value=str(user["_id"]),
        httponly=True,
        max_age=86400,
        path="/"
    )
    response.set_cookie(
        key="session_token",
        value=session_token,
        httponly=True,
        max_age=86400,
        path="/"
    )
    # Ghi log ƒëƒÉng nh·∫≠p v·ªõi gi·ªù Vi·ªát Nam (b·∫•t ƒë·ªìng b·ªô)
    vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now_vn = datetime.utcnow().replace(tzinfo=pytz.utc).astimezone(vn_tz)
    db = meals_col.database
    log_login_async(
        db,
        user.get("fullname", ""),
        request.client.host if request.client else "",
        now_vn.strftime("%Y-%m-%d %H:%M:%S"),

    )
    return response
reset_tokens = {}

# Route ƒëƒÉng xu·∫•t
@app.get("/logout")
def logout():
    response = RedirectResponse("/login", status_code=302)
    response.delete_cookie("user_id", path="/")
    return response

# Route qu√™n m·∫≠t kh·∫©u
@app.get("/forgot-password", response_class=HTMLResponse)
def forgot_password_form(request: Request):
    return templates.TemplateResponse("forgot-password.html", {"request": request})


@app.post("/forgot-password", response_class=HTMLResponse)
async def forgot_password_submit(request: Request, email: str = Form(...)):
    user = users_col.find_one({"username": email}) or users_col.find_one({"email": email})
    
    # Lu√¥n tr·∫£ v·ªÅ c√πng m·ªôt th√¥ng ƒëi·ªáp ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh b·∫£o m·∫≠t
    message = "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o email."

    if user:
        token = secrets.token_urlsafe(32)
        reset_tokens[token] = {
            "user_id": str(user["_id"]),
            "expires": datetime.utcnow() + timedelta(minutes=30)
        }

        reset_link = str(request.url_for('reset_password_form')) + f"?token={token}"

        email_message = MessageSchema(
            subject="üîê Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - SmartCalories",
            recipients=[user["email"]],
            body=f"""
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - SmartCalories</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {{
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            line-height: 1.6;
        }}
        
        .container {{
            max-width: 600px;
            margin: 0 auto;
            padding: 40px 20px;
        }}
        
        .email-card {{
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1), 0 8px 32px rgba(0, 0, 0, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.2);
            overflow: hidden;
            position: relative;
        }}
        
        .email-card::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2, #667eea);
            background-size: 200% 100%;
            animation: shimmer 3s ease-in-out infinite;
        }}
        
        @keyframes shimmer {{
            0%, 100% {{ background-position: 0% 50%; }}
            50% {{ background-position: 100% 50%; }}
        }}
        
        .header {{
            text-align: center;
            padding: 48px 40px 32px;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 1px solid rgba(226, 232, 240, 0.5);
        }}
        
        .logo-container {{
            display: inline-block;
            position: relative;
            margin-bottom: 24px;
        }}
        
        .logo {{
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
            position: relative;
        }}
        
        .logo::after {{
            content: 'üîê';
            font-size: 32px;
            color: white;
        }}
        
        .notification-dot {{
            position: absolute;
            top: -4px;
            right: -4px;
            width: 16px;
            height: 16px;
            background: linear-gradient(45deg, #f59e0b, #f97316);
            border-radius: 50%;
            animation: pulse 2s ease-in-out infinite;
        }}
        
        @keyframes pulse {{
            0%, 100% {{ transform: scale(1); }}
            50% {{ transform: scale(1.1); }}
        }}
        
        .brand-name {{
            font-size: 28px;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0;
            letter-spacing: -0.5px;
        }}
        
        .subtitle {{
            color: #64748b;
            font-size: 16px;
            margin: 8px 0 0;
            font-weight: 500;
        }}
        
        .content {{
            padding: 40px;
        }}
        
        .greeting {{
            font-size: 18px;
            color: #1e293b;
            margin: 0 0 16px;
            font-weight: 600;
        }}
        
        .message {{
            color: #475569;
            font-size: 16px;
            margin: 0 0 24px;
            line-height: 1.7;
        }}
        
        .security-notice {{
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border: 1px solid #f59e0b;
            border-radius: 16px;
            padding: 20px;
            margin: 24px 0;
            display: flex;
            align-items: flex-start;
            gap: 12px;
        }}
        
        .security-icon {{
            font-size: 20px;
            margin-top: 2px;
        }}
        
        .security-text {{
            flex: 1;
            color: #92400e;
            font-size: 14px;
            line-height: 1.6;
            margin: 0;
        }}
        
        .button-container {{
            text-align: center;
            margin: 40px 0;
        }}
        
        .reset-button {{
            display: inline-block;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            text-decoration: none;
            padding: 18px 48px;
            border-radius: 16px;
            font-weight: 600;
            font-size: 16px;
            letter-spacing: 0.5px;
            box-shadow: 0 8px 32px rgba(16, 185, 129, 0.4);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            border: 2px solid rgba(255, 255, 255, 0.2);
        }}
        
        .reset-button::before {{
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.5s ease;
        }}
        
        .reset-button:hover {{
            background: linear-gradient(135deg, #059669 0%, #047857 100%);
            box-shadow: 0 12px 40px rgba(16, 185, 129, 0.5);
            transform: translateY(-2px);
        }}
        
        .reset-button:hover::before {{
            left: 100%;
        }}
        
        .alternative-link {{
            background: #f1f5f9;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 16px;
            margin: 24px 0;
            font-size: 14px;
            color: #64748b;
            word-break: break-all;
        }}
        
        .alternative-link strong {{
            color: #1e293b;
        }}
        
        .info-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin: 32px 0;
        }}
        
        .info-item {{
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 16px;
            text-align: center;
        }}
        
        .info-icon {{
            font-size: 24px;
            margin-bottom: 8px;
            display: block;
        }}
        
        .info-title {{
            font-weight: 600;
            color: #1e293b;
            font-size: 14px;
            margin: 0 0 4px;
        }}
        
        .info-desc {{
            color: #64748b;
            font-size: 13px;
            margin: 0;
        }}
        
        .footer {{
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
            color: #94a3b8;
            text-align: center;
            padding: 32px 40px;
            font-size: 14px;
        }}
        
        .footer-logo {{
            font-size: 20px;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 12px;
        }}
        
        .footer-links {{
            margin: 16px 0;
        }}
        
        .footer-links a {{
            color: #667eea;
            text-decoration: none;
            margin: 0 12px;
            transition: color 0.3s ease;
        }}
        
        .footer-links a:hover {{
            color: #764ba2;
        }}
        
        .copyright {{
            color: #64748b;
            font-size: 12px;
            margin-top: 16px;
        }}
        
        @media (max-width: 600px) {{
            .container {{
                padding: 20px 10px;
            }}
            
            .content {{
                padding: 24px 20px;
            }}
            
            .header {{
                padding: 32px 20px 24px;
            }}
            
            .footer {{
                padding: 24px 20px;
            }}
            
            .info-grid {{
                grid-template-columns: 1fr;
            }}
            
            .reset-button {{
                padding: 14px 32px;
                font-size: 15px;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="email-card">
            <!-- Header -->
            <div class="header">
                <div class="logo-container">
                    <div class="logo">
                        <div class="notification-dot"></div>
                    </div>
                </div>
                <h1 class="brand-name">SmartCalories</h1>
                <p class="subtitle">Qu·∫£n l√Ω dinh d∆∞·ª°ng th√¥ng minh</p>
            </div>
            
            <!-- Content -->
            <div class="content">
                <h2 class="greeting">Xin ch√†o {user.get('fullname', 'b·∫°n')}! üëã</h2>
                
                <p class="message">
                    Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n SmartCalories c·ªßa b·∫°n. 
                    ƒê·ªÉ ƒë·∫£m b·∫£o t√≠nh b·∫£o m·∫≠t, vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi.
                </p>
                
                <div class="security-notice">
                    <span class="security-icon">üõ°Ô∏è</span>
                    <p class="security-text">
                        <strong>Quan tr·ªçng:</strong> Li√™n k·∫øt n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>30 ph√∫t</strong> 
                        v√† ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt l·∫ßn duy nh·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n cho t√†i kho·∫£n c·ªßa b·∫°n.
                    </p>
                </div>
                
                <div class="button-container">
                    <a href="{reset_link}" class="reset-button">
                        üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u ngay
                    </a>
                </div>
                
                <div class="alternative-link">
                    <strong>Kh√¥ng th·ªÉ nh·∫•n n√∫t?</strong> Sao ch√©p v√† d√°n li√™n k·∫øt sau v√†o tr√¨nh duy·ªát:
                    <br><br>
                    {reset_link}
                </div>
                
                <div class="info-grid">
                    <div class="info-item">
                        <span class="info-icon">‚è∞</span>
                        <p class="info-title">Th·ªùi gian hi·ªáu l·ª±c</p>
                        <p class="info-desc">30 ph√∫t k·ªÉ t·ª´ b√¢y gi·ªù</p>
                    </div>
                    <div class="info-item">
                        <span class="info-icon">üîí</span>
                        <p class="info-title">B·∫£o m·∫≠t cao</p>
                        <p class="info-desc">Li√™n k·∫øt m√£ h√≥a an to√†n</p>
                    </div>
                    <div class="info-item">
                        <span class="info-icon">üì±</span>
                        <p class="info-title">M·ªçi thi·∫øt b·ªã</p>
                        <p class="info-desc">Ho·∫°t ƒë·ªông tr√™n m√°y t√≠nh & ƒëi·ªán tho·∫°i</p>
                    </div>
                </div>
                
                <div class="security-notice" style="background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%); border-color: #ef4444;">
                    <span class="security-icon">‚ö†Ô∏è</span>
                    <p class="security-text" style="color: #dc2626;">
                        <strong>L∆∞u √Ω b·∫£o m·∫≠t:</strong> N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, 
                        vui l√≤ng b·ªè qua email n√†y v√† li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay l·∫≠p t·ª©c. 
                        T√†i kho·∫£n c·ªßa b·∫°n v·∫´n ho√†n to√†n an to√†n.
                    </p>
                </div>
            </div>
            
            <!-- Footer -->
            <div class="footer">
                <div class="footer-logo">SmartCalories</div>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</p>
                
                <div class="footer-links">
                    <a href="#" style="color: #667eea;">Trung t√¢m tr·ª£ gi√∫p</a>
                    <a href="#" style="color: #667eea;">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
                    <a href="#" style="color: #667eea;">Li√™n h·ªá h·ªó tr·ª£</a>
                </div>
                
                <p class="copyright">
                    ¬© 2025 SmartCalories. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.<br>
                    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.
                </p>
            </div>
        </div>
    </div>
</body>
</html>
            """,
            subtype="html"
        )

        fm = FastMail(conf)
        await fm.send_message(email_message)

    return templates.TemplateResponse(
        "forgot-password.html",
        {"request": request, "message": message}
    )


# Route ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
@app.get("/reset-password", response_class=HTMLResponse)
def reset_password_form(request: Request, token: str = ""):
    info = reset_tokens.get(token)
    if not info or info["expires"] < datetime.utcnow():
        return templates.TemplateResponse(
            "forgot-password.html",
            {"request": request, "error": "Li√™n k·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n."}
        )
    return templates.TemplateResponse("reset-password.html", {"request": request, "token": token})

@app.post("/reset-password", response_class=HTMLResponse)
def reset_password_submit(
    request: Request,
    token: str = Form(...),
    password: str = Form(...),
    confirm_password: str = Form(...)
):
    info = reset_tokens.get(token)
    if not info or info["expires"] < datetime.utcnow():
        return templates.TemplateResponse(
            "forgot-password.html",
            {"request": request, "error": "Li√™n k·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n."}
        )
    if password != confirm_password:
        return templates.TemplateResponse(
            "reset-password.html",
            {"request": request, "token": token, "error": "M·∫≠t kh·∫©u kh√¥ng kh·ªõp"}
        )
    users_col.update_one(
        {"_id": ObjectId(info["user_id"])},
        {"$set": {"hashed_password": bcrypt.hash(password)}}
    )
    del reset_tokens[token]
    return templates.TemplateResponse(
        "login.html",
        {"request": request, "message": "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng, h√£y ƒëƒÉng nh·∫≠p l·∫°i!"}
    )

# --- 4. MAIN PAGE, MEAL CRUD, GOALS, LOG ---
# Route trang ch√≠nh
@app.api_route("/", methods=["GET", "HEAD"], response_class=HTMLResponse)
async def home(
    request: Request,
    user_id: str = Cookie(None),
    session_token: str = Cookie(None),
    search: str = Query("", alias="search"),
    view: str = Query("", alias="view"),
    goals: str = Cookie(None)
):
    if not user_id:
        return RedirectResponse("/login", status_code=302)

    user_id_obj = ObjectId(user_id)
    user = users_col.find_one({"_id": user_id_obj})
    if user:
        user = fix_objectid(user)
    fullname = user.get("fullname", "Ng∆∞·ªùi d√πng") if user else "Ng∆∞·ªùi d√πng"
    
    # Ki·ªÉm tra session_token v√† tr·∫°ng th√°i ban
    if not user or user.get("is_banned", False):
        response = RedirectResponse("/login", status_code=302)
        response.delete_cookie("user_id", path="/")
        response.delete_cookie("session_token", path="/")
        response.set_cookie("logout_reason", "ban", path="/")
        return response
    if session_token != user.get("session_token"):
        response = RedirectResponse("/login", status_code=302)
        response.delete_cookie("user_id", path="/")
        response.delete_cookie("session_token", path="/")
        response.set_cookie("logout_reason", "other_login", path="/")
        return response

    bmr = tdee = None
    if user and all(k in user for k in ("weight", "height", "age", "gender")):
        bmr = calculate_bmr(user["weight"], user["height"], user["age"], user["gender"])
        tdee = calculate_tdee(bmr)
    
    # L·ªçc m√≥n ƒÉn theo t√™n n·∫øu c√≥ search
    meals = []
    meal_query = {}
    if search:
        meal_query["name"] = {"$regex": search, "$options": "i"}
    meals = [fix_objectid(meal) for meal in meals_col.find(meal_query)]

    vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
    today = datetime.now(vn_tz).strftime('%Y-%m-%d')

    logs = []
    for log in logs_col.aggregate([
        {"$match": {"user_id": user_id_obj, "date": today}},
        {"$lookup": {
            "from": "meals",
            "localField": "meal_id",
            "foreignField": "_id",
            "as": "meal"
        }},
        {"$unwind": "$meal"}
    ]):
        logs.append(fix_objectid(log))

    summary_result = logs_col.aggregate([
        {"$match": {"user_id": user_id_obj, "date": today}},
        {"$lookup": {
            "from": "meals",
            "localField": "meal_id",
            "foreignField": "_id",
            "as": "meal"
        }},
        {"$unwind": "$meal"},
        {"$group": {
            "_id": "$date",
            "total_calories": {"$sum": {"$multiply": ["$quantity", "$meal.calories"]}},
            "total_protein": {"$sum": {"$multiply": ["$quantity", "$meal.protein"]}},
            "total_carbs": {"$sum": {"$multiply": ["$quantity", "$meal.carbs"]}},
            "total_fat": {"$sum": {"$multiply": ["$quantity", "$meal.fat"]}},
        }}
    ])
    summary = next(summary_result, {
        "total_calories": 0,
        "total_protein": 0,
        "total_carbs": 0,
        "total_fat": 0,
    })
    # L·∫•y m·ª•c ti√™u t·ª´ cookie n·∫øu c√≥
    default_goals = {
        "calories": float(tdee) if tdee else 2000,
        "protein": 100,
        "carbs": 250,
        "fat": 60
    }
    if goals:
        try:
            goals_dict = json.loads(goals)
            goals = {**default_goals, **goals_dict}
        except Exception:
            goals = default_goals
    else:
        goals = default_goals

    # T√≠nh l∆∞·ª£ng c√≤n thi·∫øu
    missing = {
        "calories": max(goals["calories"] - summary.get("total_calories", 0), 0),
        "protein": max(goals["protein"] - summary.get("total_protein", 0), 0),
        "carbs": max(goals["carbs"] - summary.get("total_carbs", 0), 0),
        "fat": max(goals["fat"] - summary.get("total_fat", 0), 0),
    }

    # G·ª£i √Ω m√≥n ƒÉn
    nutrient_priority = max(missing, key=missing.get)
    suggested_meals = sorted(
        meals,
        key=lambda m: m.get(nutrient_priority, 0),
        reverse=True
    )[:3]

    # L·∫•y danh s√°ch ho·∫°t ƒë·ªông th·ªÉ ch·∫•t
    activities = []
    activities = [fix_objectid(act) for act in activities_col.find({"user_id": user_id_obj})]


    # L·∫•y danh s√°ch user cho admin
    users = []
    if user and user.get("role") == "admin":
        for u in users_col.find():
            u = fix_objectid(u)
            u["is_banned"] = u.get("is_banned", False)
            users.append(u)

    return templates.TemplateResponse("index.html", {
        "request": request,
        "meals": meals,
        "logs": logs,
        "summary": summary,
        "fullname": fullname,
        "user": user,
        "today": today,
        "search": search,
        "goals": goals,
        "missing": missing,
        "bmr": float(bmr) if bmr else None,
        "tdee": float(tdee) if tdee else None,
        "suggested_meals": suggested_meals,
        "nutrient_priority": nutrient_priority,
        "view": view,
        "users": users,
        "activities": activities,
    })

# Route th√™m m√≥n ƒÉn
@app.post("/add-meal")
async def add_meal(
    name: str = Form(...),
    calories: float = Form(...),
    carbs: float = Form(...),
    protein: float = Form(...),
    fat: float = Form(...),
    image_url: str = Form(None),
    user_id: str = Cookie(None)
):
    user = users_col.find_one({"_id": ObjectId(user_id)}) if user_id else None
    if user and is_too_fast(user, "add_meal"):
        return RedirectResponse(url="/?view=meals&error=double_click", status_code=303)
    fullname = user.get("fullname", "") if user else ""
    meals_col.insert_one({
        "name": name,
        "calories": calories,
        "carbs": carbs,
        "protein": protein,
        "fat": fat,
        "image_url": image_url,
        "created_by": fullname
    })
    # Ghi log ho·∫°t ƒë·ªông
    db = meals_col.database
    db["activity_logs"].insert_one({
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user": fullname,
        "action": f"Th√™m m√≥n ƒÉn: {name}"
    })
    return RedirectResponse(url="/?view=meals", status_code=303)

# Route ch·ªânh s·ª≠a m√≥n ƒÉn
@app.post("/edit-meal/{meal_id}")
async def update_meal(
    meal_id: str,
    name: str = Form(...),
    calories: float = Form(...),
    carbs: float = Form(...),
    protein: float = Form(...),
    fat: float = Form(...),
    image_url: str = Form(None)  
):
    meals_col.update_one(
        {"_id": ObjectId(meal_id)},
        {"$set": {
            "name": name,
            "calories": calories,
            "carbs": carbs,
            "protein": protein,
            "fat": fat,
            "image_url": image_url  
        }}
    )
    return RedirectResponse(url="/?view=meals", status_code=303)

# Route x√≥a m√≥n ƒÉn
@app.post("/delete-meal/{meal_id}")
async def delete_meal(meal_id: str, user_id: str = Cookie(None)):
    if not user_id:
        return RedirectResponse("/login", status_code=302)
    user = users_col.find_one({"_id": ObjectId(user_id)})
    fullname = user.get("fullname", "") if user else ""
    if not user or user.get("role") != "admin":
        return JSONResponse({"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a!"}, status_code=403)
    meal = meals_col.find_one({"_id": ObjectId(meal_id)})  # L·∫•y th√¥ng tin m√≥n ƒÉn tr∆∞·ªõc khi x√≥a
    meals_col.delete_one({"_id": ObjectId(meal_id)})
    # Ghi log ho·∫°t ƒë·ªông
    db = meals_col.database
    db["activity_logs"].insert_one({
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user": fullname,
        "action": f"X√≥a m√≥n ƒÉn: {meal.get('name', '') if meal else meal_id}"
    })
    return RedirectResponse(url="/?view=meals", status_code=303)

# Route xem chi ti·∫øt m√≥n ƒÉn
@app.post("/log-meal")
async def log_meal(
    request: Request,
    meal_id: str = Form(...),
    quantity: float = Form(...),
    date: str = Form(...),
    user_id: str = Cookie(None)
):
    if not user_id:
        return RedirectResponse("/login", status_code=302)
    # --- Ch·ªëng double-click ---
    user = users_col.find_one({"_id": ObjectId(user_id)})
    now = datetime.utcnow()
    last_log = user.get("last_log_meal_time")
    if last_log:
        if isinstance(last_log, str):
            last_log = datetime.strptime(last_log, "%Y-%m-%d %H:%M:%S")
        if now - last_log < timedelta(seconds=3):
            # N·∫øu thao t√°c qu√° nhanh, t·ª´ ch·ªëi
            return RedirectResponse(url="/?view=log&error=double_click", status_code=303)
    users_col.update_one({"_id": ObjectId(user_id)}, {"$set": {"last_log_meal_time": now.strftime("%Y-%m-%d %H:%M:%S")}})
    # --- End ch·ªëng double-click ---
    logs_col.insert_one({
        "user_id": ObjectId(user_id),
        "meal_id": ObjectId(meal_id),
        "quantity": quantity,
        "date": date
    })
    return RedirectResponse(url="/?view=log", status_code=303)

# Route ƒë·∫∑t m·ª•c ti√™u
@app.post("/set-goals")
async def set_goals(
    request: Request,
    response: Response,
    calories: float = Form(...),
    protein: float = Form(...),
    carbs: float = Form(...),
    fat: float = Form(...),
    user_id: str = Cookie(None)
):
    goals = {
        "calories": calories,
        "protein": protein,
        "carbs": carbs,
        "fat": fat
    }
    response.set_cookie(
        key="goals",
        value=json.dumps(goals, ensure_ascii=False),
        max_age=60 * 60 * 24 * 30,
        path="/"
    )

    # L·∫•y t·ªïng h√¥m nay
    vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
    today = datetime.now(vn_tz).strftime('%Y-%m-%d')
    summary_result = logs_col.aggregate([
        {"$match": {"user_id": ObjectId(user_id), "date": today}},
        {"$lookup": {
            "from": "meals",
            "localField": "meal_id",
            "foreignField": "_id",
            "as": "meal"
        }},
        {"$unwind": "$meal"},
        {"$group": {
            "_id": "$date",
            "total_calories": {"$sum": {"$multiply": ["$quantity", "$meal.calories"]}},
            "total_protein": {"$sum": {"$multiply": ["$quantity", "$meal.protein"]}},
            "total_carbs": {"$sum": {"$multiply": ["$quantity", "$meal.carbs"]}},
            "total_fat": {"$sum": {"$multiply": ["$quantity", "$meal.fat"]}},
        }}
    ])
    summary = next(summary_result, {
        "total_calories": 0,
        "total_protein": 0,
        "total_carbs": 0,
        "total_fat": 0,
    })

    missing = {
        "calories": max(calories - summary.get("total_calories", 0), 0),
        "protein": max(protein - summary.get("total_protein", 0), 0),
        "carbs": max(carbs - summary.get("total_carbs", 0), 0),
        "fat": max(fat - summary.get("total_fat", 0), 0),
    }

    # L·∫•y t·∫•t c·∫£ m√≥n ƒÉn
    meals = list(meals_col.find())
    for m in meals:
        m["_id"] = str(m["_id"])

    # T√≠nh g·ª£i √Ω: ch·ªâ m√≥n n√†o c√≥ l∆∞·ª£ng ph√π h·ª£p v·ªõi ph·∫ßn c√≤n thi·∫øu (trong kho·∫£ng 30% ƒë·∫øn 100%)
    suggested_by_nutrient = {}
    for nutrient in ["calories", "protein", "carbs", "fat"]:
        target = missing[nutrient]
        lower = target * 0.3
        upper = target * 1.1
        filtered = [m for m in meals if lower <= m.get(nutrient, 0) <= upper]
        suggested_by_nutrient[nutrient] = sorted(
            filtered, key=lambda m: abs(m.get(nutrient, 0) - target)
        )[:3]

    return JSONResponse({
        "goals": goals,
        "missing": missing,
        "suggested_meals": suggested_by_nutrient
    })

# --- 5. ACTIVITY ROUTES ---

# Route ho·∫°t ƒë·ªông th·ªÉ ch·∫•t
@app.get("/activity", response_class=HTMLResponse)
def activity_form(request: Request, user_id: str = Cookie(None)):
    if not user_id:
        return RedirectResponse("/login", status_code=302)
    return templates.TemplateResponse("activity.html", {
        "request": request,
        "activities": activity_met_table.keys()
    })

@app.post("/activity")
async def add_activity(
    request: Request,
    activity: str = Form(...),
    duration: float = Form(...),
    user_id: str = Cookie(None)
):
    if not user_id:
        return JSONResponse({"error": "Ch∆∞a ƒëƒÉng nh·∫≠p"}, status_code=401)
    user = users_col.find_one({"_id": ObjectId(user_id)})
    if is_too_fast(user, "activity"):
        return JSONResponse({"error": "B·∫°n thao t√°c qu√° nhanh, vui l√≤ng th·ª≠ l·∫°i sau."}, status_code=429)
    if not user:
        return JSONResponse({"error": "Kh√¥ng t√¨m th·∫•y user"}, status_code=404)
    weight = user.get("weight", 60)
    met = activity_met_table.get(activity)
    if not met:
        return JSONResponse({"error": "Ho·∫°t ƒë·ªông kh√¥ng h·ª£p l·ªá"}, status_code=400)
    calories_burned = calculate_burned_calories(weight, duration, met)
    vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now_vn = datetime.utcnow().replace(tzinfo=pytz.utc).astimezone(vn_tz)
    activities_col.insert_one({
        "user_id": ObjectId(user_id),
        "fullname": user.get("fullname", ""), 
        "activity": activity,
        "duration": duration,
        "calories_burned": calories_burned,
        "timestamp": now_vn.strftime("%Y-%m-%d %H:%M:%S")
    })
    return {"success": True, "calories_burned": calories_burned}

# Route xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông
@app.get("/activity-history")
async def activity_history(user_id: str = Cookie(None)):
    if not user_id:
        return JSONResponse({"error": "Ch∆∞a ƒëƒÉng nh·∫≠p"}, status_code=401)

    activities = list(activities_col.find({"user_id": ObjectId(user_id)}).sort("timestamp", -1).limit(30))

    # S·ª≠a to√†n b·ªô ObjectId trong document
    activities = [fix_objectid(act) for act in activities]

    result = [
        {
            "fullname": act.get("fullname", ""),
            "activity": act.get("activity", ""),
            "timestamp": format_vn_datetime(act.get("timestamp", "")),
            "calories_burned": act.get("calories_burned", 0)
        }
        for act in activities
    ]
    return JSONResponse(result)

# --- 6. ADMIN ROUTES ---

# Route ch·∫∑n ng∆∞·ªùi d√πng
@app.post("/ban-user")
async def ban_user(
    request: Request,
    user_id: str = Cookie(None),
    data: dict = Body(...)
):
    if not user_id:
        return JSONResponse({"success": False, "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"})
    admin = users_col.find_one({"_id": ObjectId(user_id)})
    if not admin or admin.get("role") != "admin":
        return JSONResponse({"success": False, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn"})
    target_id = data.get("user_id")
    ban = data.get("ban")
    if not target_id:
        return JSONResponse({"success": False, "message": "Thi·∫øu user_id"})
    if str(target_id) == str(user_id):
        return JSONResponse({"success": False, "message": "Kh√¥ng th·ªÉ t·ª± ban ch√≠nh m√¨nh!"})

    result = users_col.update_one(
        {"_id": ObjectId(target_id)},
        {"$set": {"is_banned": bool(ban)}}
    )
    if result.modified_count == 1:
        msg = "ƒê√£ kh√≥a t√†i kho·∫£n!" if ban else "ƒê√£ m·ªü kh√≥a t√†i kho·∫£n!"
        return JSONResponse({"success": True, "message": msg})
    else:
        return JSONResponse({"success": False, "message": "Kh√¥ng t√¨m th·∫•y user ho·∫∑c kh√¥ng thay ƒë·ªïi"})

# Route ƒë·ªïi quy·ªÅn ng∆∞·ªùi d√πng
@app.post("/change-role")
async def change_role(
    request: Request,
    user_id: str = Cookie(None),
    data: dict = Body(...)
):
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if not user_id:
        return JSONResponse({"success": False, "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"})
    admin = users_col.find_one({"_id": ObjectId(user_id)})
    if not admin or admin.get("role") != "admin":
        return JSONResponse({"success": False, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn"})
    target_id = data.get("user_id")
    new_role = data.get("role")
    if not target_id or not new_role:
        return JSONResponse({"success": False, "message": "Thi·∫øu th√¥ng tin"})
    if str(target_id) == str(user_id):
        return JSONResponse({"success": False, "message": "Kh√¥ng th·ªÉ ƒë·ªïi quy·ªÅn ch√≠nh m√¨nh!"})
    user = users_col.find_one({"_id": ObjectId(target_id)})
    if not user:
        return JSONResponse({"success": False, "message": "Kh√¥ng t√¨m th·∫•y user!"})
    users_col.update_one({"_id": ObjectId(target_id)}, {"$set": {"role": new_role}})
    return JSONResponse({"success": True, "message": "ƒê√£ ƒë·ªïi quy·ªÅn th√†nh c√¥ng!"})

# Route x√≥a ng∆∞·ªùi d√πng
@app.post("/delete-user")
async def delete_user(
    request: Request,
    user_id: str = Cookie(None),
    data: dict = Body(...)
):
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p v√† quy·ªÅn admin
    if not user_id:
        return JSONResponse({"success": False, "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"})
    admin = users_col.find_one({"_id": ObjectId(user_id)})
    if not admin or admin.get("role") != "admin":
        return JSONResponse({"success": False, "message": "B·∫°n kh√¥ng c√≥ quy·ªÅn"})
    target_id = data.get("user_id")
    if not target_id:
        return JSONResponse({"success": False, "message": "Thi·∫øu user_id"})
    if str(target_id) == str(user_id):
        return JSONResponse({"success": False, "message": "Kh√¥ng th·ªÉ t·ª± x√≥a ch√≠nh m√¨nh!"})
    result = users_col.delete_one({"_id": ObjectId(target_id)})
    if result.deleted_count == 1:
        return JSONResponse({"success": True, "message": "ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!"})
    else:
        return JSONResponse({"success": False, "message": "Kh√¥ng t√¨m th·∫•y user ho·∫∑c kh√¥ng x√≥a ƒë∆∞·ª£c!"})
    
# Route xem nh·∫≠t k√Ω ho·∫°t ƒë·ªông
@app.get("/activity-log", response_class=HTMLResponse)
async def activity_log(request: Request, user_id: str = Cookie(None)):
    # Ch·ªâ cho admin xem
    if not user_id:
        return HTMLResponse("<div class='text-red-500'>Ch∆∞a ƒëƒÉng nh·∫≠p</div>")
    user = users_col.find_one({"_id": ObjectId(user_id)})
    if not user or user.get("role") != "admin":
        return HTMLResponse("<div class='text-red-500'>B·∫°n kh√¥ng c√≥ quy·ªÅn xem nh·∫≠t k√Ω n√†y</div>")
    
    # L·∫•y database t·ª´ m·ªôt collection b·∫•t k·ª≥
    db = meals_col.database
    logs = []
    if "activity_logs" in db.list_collection_names():
        logs = list(db["activity_logs"].find().sort("time", -1).limit(50))
    
    if not logs:
        return HTMLResponse("""
        <div class='empty-log-state'>
          <div class='empty-icon'>üìã</div>
          <h3>Ch∆∞a c√≥ nh·∫≠t k√Ω ho·∫°t ƒë·ªông</h3>
          <p>H·ªá th·ªëng ch∆∞a ghi nh·∫≠n ho·∫°t ƒë·ªông n√†o.</p>
        </div>
        """)
    
    html = """
    <div class='log-header'>üìã Nh·∫≠t k√Ω ho·∫°t ƒë·ªông h·ªá th·ªëng</div>
    <table class='activity-log-table'>
        <thead>
            <tr>
                <th>üïê Th·ªùi gian</th>
                <th>üë§ Ng∆∞·ªùi d√πng</th>
                <th>‚ö° H√†nh ƒë·ªông</th>
            </tr>
        </thead>
        <tbody>
    """
    
    for log in logs:
        time_formatted = log.get('time', '')
        user_name = log.get('user', 'Kh√¥ng x√°c ƒë·ªãnh')
        action = log.get('action', 'Kh√¥ng c√≥ th√¥ng tin')
        
        html += f"""
        <tr>
            <td class='time-cell'>{time_formatted}</td>
            <td class='user-cell'>{user_name}</td>
            <td class='action-cell'>{action}</td>
        </tr>
        """
    
    html += "</tbody></table>"
    return HTMLResponse(html)

# C·∫≠p nh·∫≠t route xem nh·∫≠t k√Ω ƒëƒÉng nh·∫≠p
@app.get("/login-log", response_class=HTMLResponse)
async def login_log(request: Request, user_id: str = Cookie(None)):
    # Ch·ªâ cho admin xem
    if not user_id:
        return HTMLResponse("<div class='text-red-500'>Ch∆∞a ƒëƒÉng nh·∫≠p</div>")
    user = users_col.find_one({"_id": ObjectId(user_id)})
    if not user or user.get("role") != "admin":
        return HTMLResponse("<div class='text-red-500'>B·∫°n kh√¥ng c√≥ quy·ªÅn xem nh·∫≠t k√Ω n√†y</div>")
    
    db = meals_col.database
    logs = []
    if "login_logs" in db.list_collection_names():
        logs = list(db["login_logs"].find().sort("time", -1).limit(50))
    
    if not logs:
        return HTMLResponse("""
        <div class='empty-log-state'>
          <div class='empty-icon'>üîë</div>
          <h3>Ch∆∞a c√≥ nh·∫≠t k√Ω ƒëƒÉng nh·∫≠p</h3>
          <p>H·ªá th·ªëng ch∆∞a ghi nh·∫≠n ƒëƒÉng nh·∫≠p n√†o.</p>
        </div>
        """)
    
    html = """
    <div class='log-header'>üîê Nh·∫≠t k√Ω ƒëƒÉng nh·∫≠p h·ªá th·ªëng</div>
    <table class='login-log-table'>
        <thead>
            <tr>
                <th>üïê Th·ªùi gian</th>
                <th>üë§ Ng∆∞·ªùi d√πng</th>
                <th>üåê IP Address</th>
                <th>üìç ƒê·ªãa ch·ªâ</th>
                <th>üè¢ Nh√† m·∫°ng</th>
                <th>üó∫Ô∏è V·ªã tr√≠ b·∫£n ƒë·ªì</th>
            </tr>
        </thead>
        <tbody>
    """
    
    ip_cache = {}
    for log in logs:
        ip = log.get('ip', '')
        if ip in ip_cache:
            data = ip_cache[ip]
        else:
            try:
                resp = requests.get(f"http://ip-api.com/json/{ip}?fields=status,message,city,regionName,country,isp,lat,lon", timeout=2)
                data = resp.json()
            except Exception:
                data = {}
            ip_cache[ip] = data
            
        if data.get("status") == "success":
            city = data.get('city', '')
            region = data.get('regionName', '')
            country = data.get('country', '')
            location = f"{city}, {region}, {country}".strip(', ')
            isp = data.get('isp', 'Kh√¥ng x√°c ƒë·ªãnh')
            lat = data.get('lat','')
            lon = data.get('lon','')
            if lat and lon:
                latlon = f"<a href='https://maps.google.com/?q={lat},{lon}' target='_blank' class='map-link'>üìç Xem b·∫£n ƒë·ªì</a>"
            else:
                latlon = "<span style='color: #ccc;'>Kh√¥ng c√≥</span>"
        else:
            location = "Kh√¥ng x√°c ƒë·ªãnh"
            isp = "Kh√¥ng x√°c ƒë·ªãnh"
            latlon = "<span style='color: #ccc;'>Kh√¥ng c√≥</span>"
            
        time_formatted = log.get('time', '')
        user_name = log.get('user', 'Kh√¥ng x√°c ƒë·ªãnh')
        ip_formatted = f"<span class='ip-cell'>{ip}</span>" if ip else "<span style='color: #ccc;'>Kh√¥ng c√≥</span>"
        
        html += f"""
        <tr>
            <td class='time-cell'>{time_formatted}</td>
            <td class='user-cell'>{user_name}</td>
            <td>{ip_formatted}</td>
            <td class='location-cell'>{location}</td>
            <td class='isp-cell'>{isp}</td>
            <td>{latlon}</td>
        </tr>
        """
    
    html += "</tbody></table>"
    return HTMLResponse(html)


# --- 7. SCHEDULER & FAVICON ---

# Route chatbot
@app.post("/chatbot")
async def chatbot_endpofloat(request: Request):
    data = await request.json()
    messages = data.get("messages", [])
    meals = data.get("meals", [])
    logs = data.get("logs", [])
    summary = data.get("summary", {})
    activities = data.get("activities", [])

    last_msg = messages[-1]["content"].strip().lower()
    meal_names = [meal["name"].lower() for meal in meals]

    # üß† T·ª± ƒë·ªông nh·∫≠n di·ªán t√™n m√≥n ƒÉn t·ª´ c√°c ki·ªÉu c√¢u kh√°c nhau
    potential_name = None
    match = re.match(r"(th√™m|t·∫°o)\s+m√≥n\s+(.+)", last_msg)
    if match:
        potential_name = match.group(2).strip()
    elif any(key in last_msg for key in ["th√¥ng tin m√≥n", "bao nhi√™u calo", "dinh d∆∞·ª°ng m√≥n", "calories", "m√≥n ƒÉn"]):
        name_match = re.search(r"m√≥n\s+(.+?)(?:\?|$)", last_msg)
        if name_match:
            potential_name = name_match.group(1).strip()

    # N·∫øu ph√°t hi·ªán t√™n m√≥n v√† ch∆∞a c√≥ trong danh s√°ch th√¨ g·ªçi Gemini
    if potential_name and potential_name not in meal_names:
        try:
            model = genai.GenerativeModel("models/gemini-1.5-flash-latest")
            prompt = (
                f"H√£y ph√¢n t√≠ch m√≥n '{potential_name}' v√† ∆∞·ªõc t√≠nh th√†nh ph·∫ßn dinh d∆∞·ª°ng trung b√¨nh cho 1 kh·∫©u ph·∫ßn:\n"
                "- Calories (kcal)\n- Protein (g)\n- Carbs (g)\n- Fat (g)\n"
                "- Image URL minh h·ªça t·ª´ floaternet (n·∫øu c√≥)\n"
                "Tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:\n"
                '{ "name": "T√™n m√≥n", "calories": ..., "protein": ..., "carbs": ..., "fat": ..., "image_url": "https://..." }'
            )
            response = model.generate_content(prompt)
            json_text = response.text.strip()

            estimate = json.loads(json_text)
            estimate["image_url"] = estimate.get("image_url") or "/static/default-food.jpg"
            chatbot_temp_cache[estimate["name"].lower()] = estimate

            reply = (
                f"M√≥n **{estimate['name']}** (∆∞·ªõc t√≠nh 1 kh·∫©u ph·∫ßn):\n"
                f"- Calories: {estimate['calories']} kcal\n"
                f"- Protein: {estimate['protein']}g\n"
                f"- Carbs: {estimate['carbs']}g\n"
                f"- Fat: {estimate['fat']}g\n"
                f"- ·∫¢nh minh h·ªça: {estimate['image_url']}\n\n"
                f"üëâ B·∫°n c√≥ mu·ªën th√™m m√≥n n√†y v√†o danh s√°ch kh√¥ng? Tr·∫£ l·ªùi `ƒë·ªìng √Ω` ƒë·ªÉ th√™m."
            )
            return JSONResponse({"reply": reply})

        except Exception as e:
            prfloat("Gemini error:", e)
            return JSONResponse({"reply": "‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√≥n ƒÉn t·ª´ Gemini l√∫c n√†y."})

    # ‚úÖ Ng∆∞·ªùi d√πng x√°c nh·∫≠n mu·ªën th√™m m√≥n v√†o database
    if last_msg in ["ƒë·ªìng √Ω", "yes", "ok", "th√™m"]:
        if chatbot_temp_cache:
            latest = list(chatbot_temp_cache.values())[-1]
            meals_col.insert_one(latest)
            chatbot_temp_cache.clear()
            return JSONResponse({"reply": f"‚úÖ ƒê√£ th√™m m√≥n **{latest['name']}** v√†o danh s√°ch!"})
        else:
            return JSONResponse({"reply": "‚ùå Kh√¥ng c√≥ m√≥n n√†o ƒëang ch·ªù th√™m."})

    # ‚ùì Kh√¥ng kh·ªõp g√¨ ƒë·∫∑c bi·ªát ‚Üí fallback: h·ªèi Gemini nh∆∞ b√¨nh th∆∞·ªùng
    try:
        model = genai.GenerativeModel("models/gemini-1.5-flash-latest")
        meal_list = "\n".join([f"- {m['name']} (Calories: {m['calories']}, Protein: {m['protein']}g, Carbs: {m['carbs']}g, Fat: {m['fat']}g)" for m in meals])
        log_list = "\n".join([f"- {l['meal']['name']} x{l['quantity']} ({l['meal']['calories']*l['quantity']} cal)" for l in logs])
        activity_list = "\n".join([f"- {a['activity']} {a['duration']} ph√∫t ({a['calories_burned']} kcal)" for a in activities])
        summary_text = (
            f"T·ªïng h√¥m nay: {summary.get('total_calories', 0)} cal, "
            f"{summary.get('total_protein', 0)}g protein, "
            f"{summary.get('total_carbs', 0)}g carbs, "
            f"{summary.get('total_fat', 0)}g fat."
        )

        prompt = (
            "B·∫°n l√† tr·ª£ l√Ω dinh d∆∞·ª°ng SmartCalories, h√£y x∆∞ng h√¥ th√¢n thi·ªán l√† 'b·∫°n' v·ªõi ng∆∞·ªùi d√πng.\n"
            "Danh s√°ch m√≥n ƒÉn hi·ªán c√≥:\n" + meal_list +
            "\n---\nNh·∫≠t k√Ω h√¥m nay:\n" + log_list +
            "\n---\nPh√¢n t√≠ch h√¥m nay:\n" + summary_text +
            "\n---\nHo·∫°t ƒë·ªông th·ªÉ ch·∫•t h√¥m nay:\n" + activity_list +
            "\n---\n"
            + "\n".join([m.get("content", "") for m in messages])
        )
        response = model.generate_content(prompt)
        return JSONResponse({"reply": response.text})

    except Exception as e:
        prfloat("Gemini fallback error:", e)
        return JSONResponse({"reply": "‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi Gemini."})

# Th√™m route m·ªõi ƒë·ªÉ th√™m m√≥n ƒÉn t·ª´ chatbot
@app.post("/add-meal-from-chatbot")
async def add_meal_from_chatbot(
    request: Request,
    user_id: str = Cookie(None)
):
    if not user_id:
        return JSONResponse({"success": False, "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"}, status_code=401)
    
    data = await request.json()
    user = users_col.find_one({"_id": ObjectId(user_id)})
    
    if user and is_too_fast(user, "add_meal"):
        return JSONResponse({"success": False, "message": "B·∫°n thao t√°c qu√° nhanh, vui l√≤ng th·ª≠ l·∫°i sau."}, status_code=429)
    
    fullname = user.get("fullname", "") if user else ""
    
    # Validate required fields
    required_fields = ['name', 'calories', 'protein', 'carbs', 'fat']
    for field in required_fields:
        if field not in data:
            return JSONResponse({"success": False, "message": f"Thi·∫øu th√¥ng tin {field}"}, status_code=400)
    
    meal_doc = {
        "name": data["name"],
        "calories": float(data["calories"]),
        "protein": float(data["protein"]),
        "carbs": float(data["carbs"]),
        "fat": float(data["fat"]),
        "image_url": data.get("image_url", ""),
        "created_by": fullname,
        "source": "chatbot_ai"
    }
    
    result = meals_col.insert_one(meal_doc)
    
    # Ghi log ho·∫°t ƒë·ªông
    db = meals_col.database
    db["activity_logs"].insert_one({
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user": fullname,
        "action": f"Th√™m m√≥n ƒÉn t·ª´ AI: {data['name']}"
    })
    
    return JSONResponse({
        "success": True, 
        "message": "Th√™m m√≥n ƒÉn th√†nh c√¥ng!",
        "meal_id": str(result.inserted_id)
    })

# C·∫≠p nh·∫≠t route chatbot v·ªõi t√≠nh nƒÉng th√¥ng minh h∆°n
@app.post("/chatbot")
async def chatbot_endpoint(request: Request):
    data = await request.json()
    messages = data.get("messages", [])
    meals = data.get("meals", [])
    logs = data.get("logs", [])
    summary = data.get("summary", {})
    activities = data.get("activities", [])

    last_msg = messages[-1]["content"].strip().lower()
    meal_names = [meal["name"].lower() for meal in meals]

    # üîç T√¨m ki·∫øm m√≥n ƒÉn t·ª´ nhi·ªÅu ngu·ªìn
    search_patterns = [
        r"t√¨m\s+(?:ki·∫øm\s+)?(?:m√≥n\s+)?(.+)",
        r"(?:th√¥ng\s+tin|calories?|dinh\s+d∆∞·ª°ng)\s+(?:m√≥n\s+)?(.+)",
        r"(.+)\s+(?:c√≥\s+)?(?:bao\s+nhi√™u|bao\s+nhi·ªÅu)\s+(?:calo|calories?)",
        r"(?:th√™m|t·∫°o)\s+m√≥n\s+(.+)",
        r"m√≥n\s+(.+?)(?:\s+(?:c√≥|l√†|g√¨))?(?:\?|$)",
    ]
    
    potential_name = None
    for pattern in search_patterns:
        match = re.search(pattern, last_msg)
        if match:
            potential_name = match.group(1).strip()
            break

    # ü§ñ T√≠ch h·ª£p t√¨m ki·∫øm th√¥ng minh t·ª´ nhi·ªÅu ngu·ªìn
    if potential_name and potential_name not in meal_names:
        try:
            model = genai.GenerativeModel("models/gemini-1.5-flash-latest")
            
            # Enhanced prompt v·ªõi nhi·ªÅu ngu·ªìn d·ªØ li·ªáu
            enhanced_prompt = f"""
            B·∫°n l√† chuy√™n gia dinh d∆∞·ª°ng AI. H√£y t√¨m ki·∫øm v√† ph√¢n t√≠ch m√≥n ƒÉn "{potential_name}" t·ª´ c√°c ngu·ªìn ƒë√°ng tin c·∫≠y:

            1. **T√¨m ki·∫øm t·ª´ c∆° s·ªü d·ªØ li·ªáu dinh d∆∞·ª°ng qu·ªëc t·∫ø:**
            - USDA Food Database
            - Nutrition Data t·ª´ c√°c nghi√™n c·ª©u khoa h·ªçc
            - C∆° s·ªü d·ªØ li·ªáu dinh d∆∞·ª°ng c·ªßa c√°c qu·ªëc gia

            2. **Tham kh·∫£o t·ª´ c√°c ngu·ªìn ·∫©m th·ª±c:**
            - C√¥ng th·ª©c n·∫•u ƒÉn truy·ªÅn th·ªëng
            - Th√¥ng tin t·ª´ c√°c nh√† h√†ng uy t√≠n
            - D·ªØ li·ªáu t·ª´ c√°c ·ª©ng d·ª•ng theo d√µi dinh d∆∞·ª°ng

            3. **∆Ø·ªõc t√≠nh cho 1 kh·∫©u ph·∫ßn ti√™u chu·∫©n:**
            - Calories (kcal) - ch√≠nh x√°c ƒë·∫øn ƒë∆°n v·ªã
            - Protein (g) - l√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
            - Carbs (g) - l√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n  
            - Fat (g) - l√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
            - T√¨m URL h√¨nh ·∫£nh th·ª±c t·∫ø t·ª´ internet (∆∞u ti√™n h√¨nh ·∫£nh ch·∫•t l∆∞·ª£ng cao)

            4. **B·ªï sung th√¥ng tin h·ªØu √≠ch:**
            - Ngu·ªìn g·ªëc m√≥n ƒÉn
            - L·ª£i √≠ch dinh d∆∞·ª°ng
            - G·ª£i √Ω c√°ch ch·∫ø bi·∫øn healthy

            Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c:
            {{
                "name": "T√™n m√≥n ƒÉn (ti·∫øng Vi·ªát)",
                "calories": s·ªë_calories,
                "protein": s·ªë_protein,
                "carbs": s·ªë_carbs,
                "fat": s·ªë_fat,
                "image_url": "URL_h√¨nh_·∫£nh_th·ª±c_t·∫ø",
                "origin": "Ngu·ªìn g·ªëc m√≥n ƒÉn",
                "benefits": ["L·ª£i √≠ch 1", "L·ª£i √≠ch 2"],
                "cooking_tips": "G·ª£i √Ω ch·∫ø bi·∫øn healthy"
            }}

            H√£y ƒë·∫£m b·∫£o th√¥ng tin ch√≠nh x√°c v√† ƒë√°ng tin c·∫≠y!
            """
            
            response = model.generate_content(enhanced_prompt)
            json_text = response.text.strip()
            
            # Extract JSON from response
            json_match = re.search(r'\{.*\}', json_text, re.DOTALL)
            if json_match:
                json_text = json_match.group()
            
            try:
                meal_data = json.loads(json_text)
                
                # Validate and clean data
                meal_data["image_url"] = meal_data.get("image_url") or "/static/default-food.jpg"
                meal_data["calories"] = float(meal_data.get("calories", 0))
                meal_data["protein"] = float(meal_data.get("protein", 0))
                meal_data["carbs"] = float(meal_data.get("carbs", 0))
                meal_data["fat"] = float(meal_data.get("fat", 0))
                
                # Store in temp cache
                chatbot_temp_cache[meal_data["name"].lower()] = meal_data
                
                # Create enhanced response
                reply = f"""üîç **ƒê√£ t√¨m th·∫•y th√¥ng tin m√≥n: {meal_data['name']}**

MEAL_INFO:{json.dumps(meal_data)}

üìä **Th√¥ng tin dinh d∆∞·ª°ng** (1 kh·∫©u ph·∫ßn):
‚Ä¢ Calories: **{meal_data['calories']} kcal**
‚Ä¢ Protein: **{meal_data['protein']}g**
‚Ä¢ Carbs: **{meal_data['carbs']}g** 
‚Ä¢ Fat: **{meal_data['fat']}g**

üåç **Ngu·ªìn g·ªëc**: {meal_data.get('origin', 'Kh√¥ng x√°c ƒë·ªãnh')}

üí° **L·ª£i √≠ch dinh d∆∞·ª°ng**:
{chr(10).join(['‚Ä¢ ' + benefit for benefit in meal_data.get('benefits', ['Cung c·∫•p nƒÉng l∆∞·ª£ng cho c∆° th·ªÉ'])])}

üë®‚Äçüç≥ **G·ª£i √Ω ch·∫ø bi·∫øn healthy**: {meal_data.get('cooking_tips', 'N·∫•u v·ªõi √≠t d·∫ßu v√† nhi·ªÅu rau xanh')}

B·∫°n c√≥ mu·ªën th√™m m√≥n n√†y v√†o danh s√°ch kh√¥ng?"""
                
                return JSONResponse({
                    "reply": reply,
                    "meal_data": meal_data
                })
                
            except json.JSONDecodeError:
                # Fallback response
                return JSONResponse({
                    "reply": f"üîç T√¥i ƒë√£ t√¨m ki·∫øm m√≥n **{potential_name}** nh∆∞ng kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu. B·∫°n c√≥ th·ªÉ th·ª≠ v·ªõi t√™n m√≥n kh√°c kh√¥ng?"
                })

        except Exception as e:
            print(f"Enhanced search error: {e}")
            return JSONResponse({
                "reply": f"‚ùå Kh√¥ng th·ªÉ t√¨m ki·∫øm th√¥ng tin m√≥n **{potential_name}** l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra l·∫°i t√™n m√≥n."
            })

    # ‚úÖ X√°c nh·∫≠n th√™m m√≥n
    confirmation_words = ["ƒë·ªìng √Ω", "yes", "ok", "th√™m", "c√≥", "ƒë∆∞·ª£c", "th√™m v√†o"]
    if any(word in last_msg for word in confirmation_words):
        if chatbot_temp_cache:
            latest = list(chatbot_temp_cache.values())[-1]
            chatbot_temp_cache.clear()
            return JSONResponse({
                "reply": f"‚úÖ M√≥n **{latest['name']}** ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã ƒë·ªÉ th√™m v√†o danh s√°ch!\n\nVui l√≤ng nh·∫•n n√∫t **\"Th√™m v√†o danh s√°ch\"** ·ªü ph√≠a tr√™n ƒë·ªÉ ho√†n t·∫•t."
            })
        else:
            return JSONResponse({
                "reply": "‚ùå Kh√¥ng c√≥ m√≥n n√†o ƒëang ch·ªù th√™m. H√£y t√¨m ki·∫øm m√≥n ƒÉn tr∆∞·ªõc!"
            })

    # üß† Ph√¢n t√≠ch v√† t∆∞ v·∫•n th√¥ng minh
    try:
        model = genai.GenerativeModel("models/gemini-1.5-flash-latest")
        
        # T·∫°o context chi ti·∫øt
        meal_list = "\n".join([
            f"‚Ä¢ **{m['name']}** - {m['calories']} cal, Protein: {m['protein']}g, Carbs: {m['carbs']}g, Fat: {m['fat']}g"
            for m in meals
        ])
        
        log_list = "\n".join([
            f"‚Ä¢ **{l['meal']['name']}** x{l['quantity']} = {l['meal']['calories']*l['quantity']} cal"
            for l in logs
        ])
        
        activity_list = "\n".join([
            f"‚Ä¢ **{a['activity']}** {a['duration']} ph√∫t = {a['calories_burned']} kcal ƒë·ªët ch√°y"
            for a in activities
        ])
        
        summary_text = (
            f"**T·ªïng h√¥m nay**: {summary.get('total_calories', 0)} cal, "
            f"Protein: {summary.get('total_protein', 0)}g, "
            f"Carbs: {summary.get('total_carbs', 0)}g, "
            f"Fat: {summary.get('total_fat', 0)}g"
        )

        enhanced_system_prompt = f"""
        B·∫°n l√† SmartCalories AI - tr·ª£ l√Ω dinh d∆∞·ª°ng th√¥ng minh v√† th√¢n thi·ªán.

        üéØ **KH·∫¢ NƒÇNG C·ª¶A B·∫†N:**
        - T√¨m ki·∫øm m√≥n ƒÉn t·ª´ c∆° s·ªü d·ªØ li·ªáu qu·ªëc t·∫ø
        - Ph√¢n t√≠ch dinh d∆∞·ª°ng chi ti·∫øt v√† khoa h·ªçc
        - T∆∞ v·∫•n ch·∫ø ƒë·ªô ƒÉn c√° nh√¢n h√≥a
        - G·ª£i √Ω th·ª±c ƒë∆°n healthy v√† c√¢n b·∫±ng
        - H∆∞·ªõng d·∫´n ho·∫°t ƒë·ªông th·ªÉ ch·∫•t ph√π h·ª£p

        üìä **D·ªÆ LI·ªÜU HI·ªÜN T·∫†I:**

        **Danh s√°ch m√≥n ƒÉn c√≥ s·∫µn:**
        {meal_list}

        **Nh·∫≠t k√Ω ƒÉn h√¥m nay:**
        {log_list}

        **T·ªïng k·∫øt dinh d∆∞·ª°ng h√¥m nay:**
        {summary_text}

        **Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t h√¥m nay:**
        {activity_list}

        üé® **PHONG C√ÅCH TR·∫¢ L·ªúI:**
        - D√πng emoji ph√π h·ª£p v√† th√¢n thi·ªán
        - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n
        - ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø v√† khoa h·ªçc
        - Khuy·∫øn kh√≠ch l·ªëi s·ªëng healthy
        - S·ª≠ d·ª•ng markdown ƒë·ªÉ format ƒë·∫πp

        üìù **C√ÇU H·ªéI/Y√äU C·∫¶U:** {last_msg}

        H√£y tr·∫£ l·ªùi m·ªôt c√°ch h·ªØu √≠ch, th√¥ng minh v√† th√¢n thi·ªán!
        """

        conversation_context = "\n".join([
            f"**{msg.get('role', 'user')}**: {msg.get('content', '')}"
            for msg in messages[-5:]  # Last 5 messages for context
        ])

        full_prompt = enhanced_system_prompt + "\n\n**Ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán:**\n" + conversation_context

        response = model.generate_content(full_prompt)
        
        return JSONResponse({"reply": response.text})

    except Exception as e:
        print(f"Gemini conversation error: {e}")
        return JSONResponse({
            "reply": "‚ö†Ô∏è Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t!"
        })
    
# Route xu·∫•t CSV nh·∫≠t k√Ω
@app.get("/export-csv")
def export_csv(
    request: Request,
    mode: str = "today",
    user_id: str = Cookie(None)
):
    if not user_id:
        return RedirectResponse("/login", status_code=302)

    user_obj_id = ObjectId(user_id)
    vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
    today = datetime.now(vn_tz).strftime('%Y-%m-%d')

    match_stage = {"user_id": user_obj_id}
    if mode == "today":
        match_stage["date"] = today

    pipeline = [
        {"$match": match_stage},
        {
            "$lookup": {
                "from": "users",
                "localField": "user_id",
                "foreignField": "_id",
                "as": "user"
            }
        },
        {"$unwind": "$user"},
        {
            "$lookup": {
                "from": "meals",
                "localField": "meal_id",
                "foreignField": "_id",
                "as": "meal"
            }
        },
        {"$unwind": "$meal"},
        {
            "$project": {
                "fullname": "$user.fullname",
                "meal_name": "$meal.name",
                "quantity": 1,
                "date": 1
            }
        }
    ]

    logs = logs_col.aggregate(pipeline)

    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(["H·ªç t√™n", "T√™n m√≥n ƒÉn", "S·ªë l∆∞·ª£ng", "Ng√†y"])
    for log in logs:
        writer.writerow([
            log.get("fullname", ""),
            log.get("meal_name", ""),
            log.get("quantity", 0),
            log.get("date", "")
        ])
    csv_content = output.getvalue().encode('utf-8-sig')
    output.close()

    filename = f"log_data_{today}.csv" if mode == "today" else "log_data_all.csv"

    return StreamingResponse(
        io.BytesIO(csv_content),
        media_type="text/csv",
        headers={"Content-Disposition": f"attachment; filename={filename}"}
    )

# --- 8. MISC ROUTES ---

# t·∫°o favicon
@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    return FileResponse("app/static/favicon.ico")

def calculate_burned_calories(weight_kg: float, duration_min: float, met: float) -> float:
    return round(met * weight_kg * (duration_min / 60.0), 2)

def format_vn_datetime(dt_str):
    # dt_str d·∫°ng "YYYY-MM-DD HH:MM:SS"
    try:
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
        return dt.strftime("%H:%M %d/%m/%Y")
    except Exception:
        return dt_str

def reset_logs_job():
    db = meals_col.database
    db["activity_logs"].delete_many({})
    db["login_logs"].delete_many({})
    activities_col.delete_many({}) 

scheduler = BackgroundScheduler()
scheduler.add_job(reset_logs_job, 'cron', day=1, hour=0, minute=1)
scheduler.start()

# --- 9. PROFILE & SESSION ROUTES ---

# Trang th√¥ng tin c√° nh√¢n
@app.post("/profile")
async def update_profile(
    request: Request,
    height: float = Form(...),
    weight: float = Form(...),
    age: float = Form(...),
    gender: str = Form(...),
    email: str = Form(...),
    avatar_file: UploadFile = File(None),
    user_id: str = Cookie(None)
):
    if not user_id:
        return JSONResponse({"success": False, "message": "Ch∆∞a ƒëƒÉng nh·∫≠p"}, status_code=401)

    user = users_col.find_one({"_id": ObjectId(user_id)})
    if users_col.find_one({"email": email, "_id": {"$ne": ObjectId(user_id)}}):
        return JSONResponse({"success": False, "message": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!"}, status_code=400)

    avatar_url = ""
    if avatar_file:
        # Upload l√™n Cloudinary
        result = cloudinary.uploader.upload(await avatar_file.read(), folder="avatars")
        avatar_url = result["secure_url"]

    update_data = {
        "height": height,
        "weight": weight,
        "age": age,
        "gender": gender,
        "email": email
    }
    if avatar_url:
        update_data["avatar_url"] = avatar_url

    users_col.update_one(
        {"_id": ObjectId(user_id)},
        {"$set": update_data}
    )

    bmr = calculate_bmr(weight, height, age, gender)
    tdee = calculate_tdee(bmr)
    return JSONResponse({
        "success": True,
        "message": "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!",
        "data": {
            "height": height,
            "weight": weight,
            "age": age,
            "gender": gender,
            "email": email,
            "avatar_url": avatar_url,
            "bmr": float(bmr),
            "tdee": float(tdee)
        }
    })

# Ki·ªÉm tra phi√™n ƒëƒÉng nh·∫≠p
@app.get("/check-session")
def check_session(user_id: str = Cookie(None), session_token: str = Cookie(None)):
    if not user_id:
        return {"valid": False, "reason": "logout"}
    user = users_col.find_one({"_id": ObjectId(user_id)})
    if not user or user.get("is_banned", False):
        return {"valid": False, "reason": "ban"}
    if session_token != user.get("session_token"):
        return {"valid": False, "reason": "other_login"}
    return {"valid": True}

def reset_logs_job():
    db = meals_col.database
    db["activity_logs"].delete_many({})
    db["login_logs"].delete_many({})

scheduler = BackgroundScheduler()
scheduler.add_job(reset_logs_job, 'cron', hour=0, minute=1)  
scheduler.start()
